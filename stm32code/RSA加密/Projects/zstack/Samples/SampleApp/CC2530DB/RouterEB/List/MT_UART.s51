///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        11/May/2017  09:43:37 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  F:\Code\zigbee\Ô´´úÂë\RSAÍê³É\Components\mt\MT_UA /
//                          RT.c                                              /
//    Command line       =  -f F:\Code\zigbee\Ô´´úÂë\RSAÍê³É\Projects\zstack\ /
//                          Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530D /
//                          B\f8wRouter.cfg (-DCPU32MHZ -DROOT=__near_func    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                  /
//                          F:\Code\zigbee\Ô´´úÂë\RSAÍê³É\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f /
//                          8wConfig.cfg (-DZIGBEEPRO -DSECURE=0              /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFF00                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 F:\Code\zigbee\Ô´´úÂë\RSAÍ /
//                          ê³É\Components\mt\MT_UART.c -D ZTOOL_P1 -D        /
//                          xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D       /
//                          LCD_SUPPORTED=DEBUG -lC                           /
//                          F:\Code\zigbee\Ô´´úÂë\RSAÍê³É\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\RouterEB\List\ -lA        /
//                          F:\Code\zigbee\Ô´´úÂë\RSAÍê³É\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\RouterEB\List\            /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          F:\Code\zigbee\Ô´´úÂë\RSAÍê³É\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\RouterEB\Obj\ -e          /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          F:\Code\zigbee\Ô´´úÂë\RSAÍê³É\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\ -I                       /
//                          F:\Code\zigbee\Ô´´úÂë\RSAÍê³É\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\..\Source\ -I             /
//                          F:\Code\zigbee\Ô´´úÂë\RSAÍê³É\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\  /
//                          -I F:\Code\zigbee\Ô´´úÂë\RSAÍê³É\Projects\zstack\ /
//                          Samples\SampleApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\hal\include\ -I F:\Code\zigbee\Ô´´úÂë\RSAÍê³É /
//                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\.. /
//                          \..\..\..\Components\hal\target\CC2530EB\ -I      /
//                          F:\Code\zigbee\Ô´´úÂë\RSAÍê³É\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\..\..\..\..\..\Components /
//                          \mac\include\ -I F:\Code\zigbee\Ô´´úÂë\RSAÍê³É\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\mac\high_level\ -I              /
//                          F:\Code\zigbee\Ô´´úÂë\RSAÍê³É\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\..\..\..\..\..\Components /
//                          \mac\low_level\srf04\ -I                          /
//                          F:\Code\zigbee\Ô´´úÂë\RSAÍê³É\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\..\..\..\..\..\Components /
//                          \mac\low_level\srf04\single_chip\ -I              /
//                          F:\Code\zigbee\Ô´´úÂë\RSAÍê³É\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\..\..\..\..\..\Components /
//                          \mt\ -I F:\Code\zigbee\Ô´´úÂë\RSAÍê³É\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Co /
//                          mponents\osal\include\ -I                         /
//                          F:\Code\zigbee\Ô´´úÂë\RSAÍê³É\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\..\..\..\..\..\Components /
//                          \services\saddr\ -I F:\Code\zigbee\Ô´´úÂë\RSAÍê³É /
//                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\.. /
//                          \..\..\..\Components\services\sdata\ -I           /
//                          F:\Code\zigbee\Ô´´úÂë\RSAÍê³É\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\..\..\..\..\..\Components /
//                          \stack\af\ -I F:\Code\zigbee\Ô´´úÂë\RSAÍê³É\Proje /
//                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. /
//                          \..\Components\stack\nwk\ -I                      /
//                          F:\Code\zigbee\Ô´´úÂë\RSAÍê³É\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\..\..\..\..\..\Components /
//                          \stack\sapi\ -I F:\Code\zigbee\Ô´´úÂë\RSAÍê³É\Pro /
//                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ /
//                          ..\..\Components\stack\sec\ -I                    /
//                          F:\Code\zigbee\Ô´´úÂë\RSAÍê³É\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\..\..\..\..\..\Components /
//                          \stack\sys\ -I F:\Code\zigbee\Ô´´úÂë\RSAÍê³É\Proj /
//                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. /
//                          .\..\Components\stack\zdo\ -I                     /
//                          F:\Code\zigbee\Ô´´úÂë\RSAÍê³É\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\..\..\..\..\..\Components /
//                          \zmac\ -I F:\Code\zigbee\Ô´´úÂë\RSAÍê³É\Projects\ /
//                          zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ /
//                          Components\zmac\f8w\ -Ohz --require_prototypes    /
//    List file          =  F:\Code\zigbee\Ô´´úÂë\RSAÍê³É\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\RouterEB\List\MT_UART.s51 /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME MT_UART

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ADD_XSTACK_DISP0_16
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD_X
        EXTERN ?L_EQ_X
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?L_MUL
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?S_SHL
        EXTERN ?UL_DIV_MOD
        EXTERN ?UL_GT
        EXTERN ?UL_SHR
        EXTERN ?US_DIV_MOD
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_16
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTORE_R2345
        EXTERN __INIT_XDATA_Z

        PUBLIC ??MT_UartCalcFCS?relay
        FUNCTION ??MT_UartCalcFCS?relay,0203H
        PUBLIC ??MT_UartInit?relay
        FUNCTION ??MT_UartInit?relay,0203H
        PUBLIC ??MT_UartProcessZToolData?relay
        FUNCTION ??MT_UartProcessZToolData?relay,0203H
        PUBLIC ??MT_UartRegisterTaskID?relay
        FUNCTION ??MT_UartRegisterTaskID?relay,0203H
        PUBLIC ??RSAm?relay
        FUNCTION ??RSAm?relay,0203H
        PUBLIC ??gcdm?relay
        FUNCTION ??gcdm?relay,0203H
        PUBLIC ??getDm?relay
        FUNCTION ??getDm?relay,0203H
        PUBLIC ??getEm?relay
        FUNCTION ??getEm?relay,0203H
        PUBLIC ??getpm?relay
        FUNCTION ??getpm?relay,0203H
        PUBLIC ??getqm?relay
        FUNCTION ??getqm?relay,0203H
        PUBLIC ??primem?relay
        FUNCTION ??primem?relay,0203H
        PUBLIC App_TaskID
        PUBLIC CMD_Token
        PUBLIC FSC_Token
        PUBLIC LEN_Token
        PUBLIC MT_UartCalcFCS
        FUNCTION MT_UartCalcFCS,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC MT_UartInit
        FUNCTION MT_UartInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 29, STACK
        PUBLIC MT_UartProcessZToolData
        FUNCTION MT_UartProcessZToolData,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 435, STACK
        PUBLIC MT_UartRegisterTaskID
        FUNCTION MT_UartRegisterTaskID,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC RSAm
        FUNCTION RSAm,0203H
        ARGFRAME XSTACK, 435, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 28, STACK
        PUBWEAK __Constant_1
        PUBWEAK __Constant_2
        PUBWEAK __Constant_ffffffff
        PUBLIC gcdm
        FUNCTION gcdm,0203H
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 24, STACK
        PUBLIC getDm
        FUNCTION getDm,0203H
        ARGFRAME XSTACK, 431, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 28, STACK
        PUBLIC getEm
        FUNCTION getEm,021203H
        ARGFRAME XSTACK, 427, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 24, STACK
        PUBLIC getpm
        FUNCTION getpm,021203H
        ARGFRAME XSTACK, 427, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC getqm
        FUNCTION getqm,021203H
        ARGFRAME XSTACK, 427, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC pMsg
        PUBLIC primem
        FUNCTION primem,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        PUBLIC state
        PUBLIC tempDataLen
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
HalUARTOpen         SYMBOL "HalUARTOpen"
HalUARTRead         SYMBOL "HalUARTRead"
Hal_UART_RxBufLen   SYMBOL "Hal_UART_RxBufLen"
HalUARTWrite        SYMBOL "HalUARTWrite"
osal_msg_allocate   SYMBOL "osal_msg_allocate"
osal_msg_send       SYMBOL "osal_msg_send"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_rand           SYMBOL "osal_rand"
??HalUARTOpen?relay SYMBOL "?relay", HalUARTOpen
??HalUARTRead?relay SYMBOL "?relay", HalUARTRead
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??Hal_UART_RxBufLen?relay SYMBOL "?relay", Hal_UART_RxBufLen
??osal_msg_allocate?relay SYMBOL "?relay", osal_msg_allocate
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_send?relay SYMBOL "?relay", osal_msg_send
??osal_rand?relay   SYMBOL "?relay", osal_rand
MT_UartCalcFCS      SYMBOL "MT_UartCalcFCS"
??MT_UartCalcFCS?relay SYMBOL "?relay", MT_UartCalcFCS
MT_UartInit         SYMBOL "MT_UartInit"
??MT_UartInit?relay SYMBOL "?relay", MT_UartInit
MT_UartProcessZToolData SYMBOL "MT_UartProcessZToolData"
??MT_UartProcessZToolData?relay SYMBOL "?relay", MT_UartProcessZToolData
MT_UartRegisterTaskID SYMBOL "MT_UartRegisterTaskID"
??MT_UartRegisterTaskID?relay SYMBOL "?relay", MT_UartRegisterTaskID
RSAm                SYMBOL "RSAm"
??RSAm?relay        SYMBOL "?relay", RSAm
gcdm                SYMBOL "gcdm"
??gcdm?relay        SYMBOL "?relay", gcdm
getDm               SYMBOL "getDm"
??getDm?relay       SYMBOL "?relay", getDm
getEm               SYMBOL "getEm"
??getEm?relay       SYMBOL "?relay", getEm
getpm               SYMBOL "getpm"
??getpm?relay       SYMBOL "?relay", getpm
getqm               SYMBOL "getqm"
??getqm?relay       SYMBOL "?relay", getqm
primem              SYMBOL "primem"
??primem?relay      SYMBOL "?relay", primem

        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 427, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Hal_UART_RxBufLen
        FUNCTION Hal_UART_RxBufLen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 427, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 427, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 427, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 427, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 427, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??HalUARTOpen?relay
        FUNCTION ??HalUARTOpen?relay,00H
        EXTERN ??HalUARTRead?relay
        FUNCTION ??HalUARTRead?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??Hal_UART_RxBufLen?relay
        FUNCTION ??Hal_UART_RxBufLen?relay,00H
        EXTERN ??osal_msg_allocate?relay
        FUNCTION ??osal_msg_allocate?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_send?relay
        FUNCTION ??osal_msg_send?relay,00H
        EXTERN ??osal_rand?relay
        FUNCTION ??osal_rand?relay,00H
        EXTERN RSA_d
        EXTERN RSA_e
        EXTERN RSA_n

// F:\Code\zigbee\Ô´´úÂë\RSAÍê³É\Components\mt\MT_UART.c
//    1 /***************************************************************************************************
//    2   Filename:       MT_UART.c
//    3   Revised:        $Date: 2009-03-12 16:25:22 -0700 (Thu, 12 Mar 2009) $
//    4   Revision:       $Revision: 19404 $
//    5 
//    6   Description:  This module handles anything dealing with the serial port.
//    7 
//    8   Copyright 2007 Texas Instruments Incorporated. All rights reserved.
//    9 
//   10   IMPORTANT: Your use of this Software is limited to those specific rights
//   11   granted under the terms of a software license agreement between the user
//   12   who downloaded the software, his/her employer (which must be your employer)
//   13   and Texas Instruments Incorporated (the "License").  You may not use this
//   14   Software unless you agree to abide by the terms of the License. The License
//   15   limits your use, and you acknowledge, that the Software may not be modified,
//   16   copied or distributed unless embedded on a Texas Instruments microcontroller
//   17   or used solely and exclusively in conjunction with a Texas Instruments radio
//   18   frequency transceiver, which is integrated into your product.  Other than for
//   19   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   20   works of, modify, distribute, perform, display or sell this Software and/or
//   21   its documentation for any purpose.
//   22 
//   23   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   24   PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   25   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   26   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   27   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   28   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   29   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   30   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   31   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   32   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   33   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   34 
//   35   Should you have any questions regarding your right to use this Software,
//   36   contact Texas Instruments Incorporated at www.TI.com.
//   37 
//   38 ***************************************************************************************************/
//   39 
//   40 /***************************************************************************************************
//   41  * INCLUDES
//   42  ***************************************************************************************************/
//   43 #include "ZComDef.h"
//   44 #include "OSAL.h"
//   45 #include "hal_uart.h"
//   46 #include "MT.h"
//   47 #include "MT_UART.h"
//   48 #include "OSAL_Memory.h"
//   49 
//   50 
//   51 /***************************************************************************************************
//   52  * MACROS
//   53  ***************************************************************************************************/
//   54 
//   55 /***************************************************************************************************
//   56  * CONSTANTS
//   57  ***************************************************************************************************/
//   58 /* State values for ZTool protocal */
//   59 #define SOP_STATE      0x00
//   60 #define CMD_STATE1     0x01
//   61 #define CMD_STATE2     0x02
//   62 #define LEN_STATE      0x03
//   63 #define DATA_STATE     0x04
//   64 #define FCS_STATE      0x05
//   65 
//   66 /***************************************************************************************************
//   67  *                                         GLOBAL VARIABLES
//   68  ***************************************************************************************************/
//   69 /* Used to indentify the application ID for osal task */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   70 byte App_TaskID;
App_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   71 
//   72 /* ZTool protocal parameters */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   73 uint8 state;
state:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   74 uint8  CMD_Token[2];
CMD_Token:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   75 uint8  LEN_Token;
LEN_Token:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   76 uint8  FSC_Token;
FSC_Token:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   77 mtOSALSerialData_t  *pMsg;
pMsg:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   78 uint8  tempDataLen;
tempDataLen:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   79 
//   80 unsigned long int gcdm(unsigned long int a,unsigned long int b);
//   81 unsigned long int getDm(unsigned long int Fn,unsigned long int e1);
//   82 unsigned long int getEm(unsigned long int Fn);
//   83 uint8 primem(uint8 i);
//   84 uint8 getpm(uint8 i);
//   85 uint8 getqm(uint8 p1);
//   86 unsigned long int RSAm(unsigned long int a,unsigned long int b,unsigned long int c);
//   87 
//   88 #if defined (ZAPP_P1) || defined (ZAPP_P2)
//   89 uint16  MT_UartMaxZAppBufLen;
//   90 bool    MT_UartZAppRxStatus;
//   91 #endif
//   92 
//   93 
//   94 /***************************************************************************************************
//   95  *                                          LOCAL FUNCTIONS
//   96  ***************************************************************************************************/
//   97 
//   98 /***************************************************************************************************
//   99  * @fn      MT_UartInit
//  100  *
//  101  * @brief   Initialize MT with UART support
//  102  *
//  103  * @param   None
//  104  *
//  105  * @return  None
//  106 ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  107 void MT_UartInit ()
MT_UartInit:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function MT_UartInit
        CODE
//  108 {
        FUNCALL MT_UartInit, HalUARTOpen
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 29
        MOV     A,#-0x1d
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 29)
//  109   halUARTCfg_t uartConfig;
//  110 
//  111   /* Initialize APP ID */
//  112   App_TaskID = 0;
        MOV     DPTR,#App_TaskID
        CLR     A
        MOVX    @DPTR,A
//  113 
//  114   /* UART Configuration */
//  115   uartConfig.configured           = TRUE;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        INC     A
        MOVX    @DPTR,A
//  116   uartConfig.baudRate             = MT_UART_DEFAULT_BAUDRATE;
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        MOVX    @DPTR,A
//  117   uartConfig.flowControl          = MT_UART_DEFAULT_OVERFLOW;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  118   uartConfig.flowControlThreshold = MT_UART_DEFAULT_THRESHOLD;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x40
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  119   uartConfig.rx.maxBufSize        = MT_UART_DEFAULT_MAX_RX_BUFF;
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  120   uartConfig.tx.maxBufSize        = MT_UART_DEFAULT_MAX_TX_BUFF;
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  121   uartConfig.idleTimeout          = MT_UART_DEFAULT_IDLE_TIMEOUT;
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x6
        MOVX    @DPTR,A
//  122   uartConfig.intEnable            = TRUE;
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  123 #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
//  124   uartConfig.callBackFunc         = MT_UartProcessZToolData;
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#??MT_UartProcessZToolData?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??MT_UartProcessZToolData?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  125 #elif defined (ZAPP_P1) || defined (ZAPP_P2)
//  126   uartConfig.callBackFunc         = MT_UartProcessZAppData;
//  127 #else
//  128   uartConfig.callBackFunc         = NULL;
//  129 #endif
//  130 
//  131   /* Start UART */
//  132 #if defined (MT_UART_DEFAULT_PORT)
//  133   HalUARTOpen (MT_UART_DEFAULT_PORT, &uartConfig);
        ; Setup parameters for call to function HalUARTOpen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTOpen?relay
//  134 #else
//  135   /* Silence IAR compiler warning */
//  136   (void)uartConfig;
//  137 #endif
//  138 
//  139   /* Initialize for ZApp */
//  140 #if defined (ZAPP_P1) || defined (ZAPP_P2)
//  141   /* Default max bytes that ZAPP can take */
//  142   MT_UartMaxZAppBufLen  = 1;
//  143   MT_UartZAppRxStatus   = MT_UART_ZAPP_RX_READY;
//  144 #endif
//  145 
//  146 }
        MOV     A,#0x1d
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock1
//  147 
//  148 /***************************************************************************************************
//  149  * @fn      MT_SerialRegisterTaskID
//  150  *
//  151  * @brief   This function registers the taskID of the application so it knows
//  152  *          where to send the messages whent they come in.
//  153  *
//  154  * @param   void
//  155  *
//  156  * @return  void
//  157  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  158 void MT_UartRegisterTaskID( byte taskID )
MT_UartRegisterTaskID:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function MT_UartRegisterTaskID
        CODE
//  159 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  160   App_TaskID = taskID;
        MOV     A,R1
        MOV     DPTR,#App_TaskID
        MOVX    @DPTR,A
//  161 }
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock2
//  162 
//  163 /***************************************************************************************************
//  164  * @fn      SPIMgr_CalcFCS
//  165  *
//  166  * @brief   Calculate the FCS of a message buffer by XOR'ing each byte.
//  167  *          Remember to NOT include SOP and FCS fields, so start at the CMD field.
//  168  *
//  169  * @param   byte *msg_ptr - message pointer
//  170  * @param   byte len - length (in bytes) of message
//  171  *
//  172  * @return  result byte
//  173  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  174 byte MT_UartCalcFCS( uint8 *msg_ptr, uint8 len )
MT_UartCalcFCS:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function MT_UartCalcFCS
        CODE
//  175 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
        MOV     R4,A
//  176   byte x;
//  177   byte xorResult;
//  178 
//  179   xorResult = 0;
        MOV     R1,#0x0
//  180 
//  181   for ( x = 0; x < len; x++, msg_ptr++ )
        MOV     R0,#0x0
        SJMP    ??MT_UartCalcFCS_0
//  182     xorResult = xorResult ^ *msg_ptr;
??MT_UartCalcFCS_1:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        XCH     A,R1
        XRL     A,R1
        MOV     R1,A
        INC     R0
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
??MT_UartCalcFCS_0:
        MOV     A,R0
        CLR     C
        SUBB    A,R4
        JC      ??MT_UartCalcFCS_1
//  183 
//  184   return ( xorResult );
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock3
//  185 }
//  186    
//  187 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  188 void MT_UartProcessZToolData ( uint8 port, uint8 event )
MT_UartProcessZToolData:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function MT_UartProcessZToolData
        CODE
//  189 {
        FUNCALL MT_UartProcessZToolData, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 427, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 427, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UartProcessZToolData, Hal_UART_RxBufLen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 427, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 427, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UartProcessZToolData, getpm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 427, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 427, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UartProcessZToolData, getqm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 427, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 427, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UartProcessZToolData, getEm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 427, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 427, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UartProcessZToolData, getDm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 431, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 431, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UartProcessZToolData, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 427, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 427, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UartProcessZToolData, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 427, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 427, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UartProcessZToolData, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 427, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 427, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UartProcessZToolData, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 427, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 427, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UartProcessZToolData, RSAm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 435, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 435, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UartProcessZToolData, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 427, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 427, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x15
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        ; Saved register size: 21
        ; Auto size: 406
        MOV     DPL,#0x6a
        MOV     DPH,#-0x2
        LCALL   ?ADD_XSTACK_DISP0_16
        CFI CFA_XSP16 add(XSP16, 427)
        MOV     ?V0 + 12,R1
//  190   uint8 flag=0,i,j=0;   //flagÊÇÅÐ¶ÏÓÐÃ»ÓÐÊÕµ½Êý¾Ý£¬j¼ÇÂ¼Êý¾Ý³¤¶È
        MOV     ?V0 + 3,#0x0
        MOV     R7,#0x0
//  191   uint8 buf[128];     //´®¿Úbuffer×î´ó»º³åÄ¬ÈÏÊÇ128£¬ÎÒÃÇÕâÀïÓÃ128.
//  192   (void)event;        // Intentionally unreferenced parameter  
//  193   
//  194   uint8 r=4;
        MOV     ?V0 + 2,#0x4
        SJMP    ??MT_UartProcessZToolData_0
//  195   uint8 k,y;
//  196   uint8 p,q;
//  197   unsigned long int k_e,k_d,k_n,k_yn;
//  198   
//  199   while (Hal_UART_RxBufLen(port)) //¼ì²â´®¿ÚÊý¾ÝÊÇ·ñ½ÓÊÕÍê³É
//  200 
//  201   {
//  202     HalUARTRead (port,&buf[j], 1);  //°ÑÊý¾Ý½ÓÊÕ·Åµ½bufÖÐ
??MT_UartProcessZToolData_1:
        ; Setup parameters for call to function HalUARTRead
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     ?V0 + 0,R7
        MOV     DPL,#0x16
        MOV     DPH,R4
        LCALL   ?XSTACK_DISP0_16
        MOV     A,DPL
        ADD     A,?V0 + 0
        MOV     R2,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     R3,A
        MOV     R1,?V0 + 12
        LCALL   ??HalUARTRead?relay
//  203     j++;                           //¼ÇÂ¼×Ö·ûÊý
        INC     R7
//  204     flag=1;                         //ÒÑ¾­´Ó´®¿Ú½ÓÊÕµ½ÐÅÏ¢
        MOV     ?V0 + 3,#0x1
//  205   } 
??MT_UartProcessZToolData_0:
        ; Setup parameters for call to function Hal_UART_RxBufLen
        MOV     R1,?V0 + 12
        LCALL   ??Hal_UART_RxBufLen?relay
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     ??MT_UartProcessZToolData_1
//  206   for(i=0;i<4;i++)
        MOV     R6,#0x0
//  207     if(buf[i]=='k')
??MT_UartProcessZToolData_2:
        MOV     ?V0 + 0,R6
        MOV     DPL,#0x16
        MOV     DPH,#0x1
        LCALL   ?XSTACK_DISP0_16
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_8:
        XRL     A,#0x6b
        JNZ     ??MT_UartProcessZToolData_3
//  208       r--;
        DEC     ?V0 + 2
??MT_UartProcessZToolData_3:
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0x4
        JC      ??MT_UartProcessZToolData_2
//  209  
//  210     if(r==0)       //ÒÑ¾­´Ó´®¿Ú½ÓÊÕµ½ÐÅÏ¢
        MOV     A,?V0 + 2
        JZ      $+5
        LJMP    ??MT_UartProcessZToolData_4 & 0xFFFF
//  211 
//  212   { 
//  213     uint8 send[30];
//  214     uint8 ii;
//  215     p=getpm(1);
        ; Setup parameters for call to function getpm
        MOV     R1,#0x1
        LCALL   ??getpm?relay
        MOV     A,R1
        MOV     R6,A
//  216     q=getqm(p);
        ; Setup parameters for call to function getqm
        LCALL   ??getqm?relay
        MOV     A,R1
        MOV     R0,A
//  217     k_n=p*q;
        MOV     DPL,R6
        MOV     R2,DPL
        MOV     A,R2
        MOV     B,R0
        MUL     AB
        MOV     ?V0 + 0,A
        MOV     R4,B
        CLR     A
        ADD     A,R4
        MOV     ?V0 + 1,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
//  218     k_yn=(p-1)*(q-1);
        MOV     A,R2
        ADD     A,#-0x1
        MOV     ?V0 + 4,A
        CLR     A
        ADDC    A,#-0x1
        MOV     ?V0 + 5,A
        MOV     A,R0
        ADD     A,#-0x1
        MOV     ?V0 + 6,A
        CLR     A
        ADDC    A,#-0x1
        MOV     ?V0 + 7,A
        MOV     A,?V0 + 4
        MOV     B,?V0 + 6
        MUL     AB
        XCH     A,?V0 + 4
        MOV     R0,B
        MOV     B,?V0 + 7
        MUL     AB
        ADD     A,R0
        MOV     R0,A
        MOV     B,?V0 + 6
        MOV     A,?V0 + 5
        MUL     AB
        ADD     A,R0
        MOV     ?V0 + 8,?V0 + 4
        MOV     ?V0 + 9,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V0 + 10,A
        MOV     ?V0 + 11,A
//  219     k_e=getEm(k_yn);
        ; Setup parameters for call to function getEm
        MOV     R2,?V0 + 8
        MOV     R3,?V0 + 9
        MOV     R4,A
        MOV     R5,A
        LCALL   ??getEm?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
//  220     k_d=getDm(k_yn,k_e);
//  221     RSA_d=k_d;
        ; Setup parameters for call to function getDm
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 431)
        MOV     R2,?V0 + 8
        MOV     R3,?V0 + 9
        MOV     R4,?V0 + 10
        MOV     R5,?V0 + 11
        LCALL   ??getDm?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 427)
        MOV     DPTR,#RSA_d
        LCALL   ?XSTORE_R2345
//  222     RSA_e=k_e;
        MOV     DPTR,#RSA_e
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
//  223     RSA_n=k_n;
        MOV     DPTR,#RSA_n
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  224     for(i=0;i<4;i++)
//  225       send[i]='x';
        MOV     A,#0x78
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#0x4
??MT_UartProcessZToolData_5:
        MOVX    @DPTR,A
        INC     DPTR
        DJNZ    R0,??MT_UartProcessZToolData_5
//  226     for(i=0,ii=4;i<4;i++,ii++)
        MOV     R6,#0x0
        MOV     R1,#0x4
//  227       send[ii]=k_e>>(i*8);
??MT_UartProcessZToolData_6:
        MOV     ?V0 + 8,?V0 + 4
        MOV     ?V0 + 9,?V0 + 5
        MOV     ?V0 + 10,?V0 + 6
        MOV     ?V0 + 11,?V0 + 7
        MOV     A,R6
        RLC     A
        RLC     A
        RLC     A
        ANL     A,#0xf8
        MOV     R0,#?V0 + 8
        LCALL   ?UL_SHR
        PUSH    ?V0 + 8
        CFI CFA_SP SP+-1
        MOV     ?V0 + 8,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_14:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        INC     R6
        INC     R1
        MOV     A,R6
        CLR     C
        SUBB    A,#0x4
        JC      ??MT_UartProcessZToolData_6
//  228     for(i=0,ii=8;i<4;i++,ii++)
        MOV     R6,#0x0
        MOV     R1,#0x8
//  229       send[ii]=k_n>>(i*8);
??MT_UartProcessZToolData_7:
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,?V0 + 1
        MOV     ?V0 + 6,?V0 + 2
        MOV     ?V0 + 7,?V0 + 3
        MOV     A,R6
        RLC     A
        RLC     A
        RLC     A
        ANL     A,#0xf8
        MOV     R0,#?V0 + 4
        LCALL   ?UL_SHR
        PUSH    ?V0 + 4
        CFI CFA_SP SP+-1
        MOV     ?V0 + 4,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,?V0 + 4
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        INC     R6
        INC     R1
        MOV     A,R6
        CLR     C
        SUBB    A,#0x4
        JC      ??MT_UartProcessZToolData_7
//  230     HalUARTWrite(0,"·¢ËÍkeye\n",7);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x7
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "\\267\\242\\313\\315keye\\n">` & 0xff
        MOV     R3,#(`?<Constant "\\267\\242\\313\\315keye\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  231    // HalUARTWrite(0,(uint8*)&RSA_e,4);
//  232     //HalUARTWrite(0,(uint8*)&RSA_n,4);
//  233 	    //·ÖÅäÄÚ´æ¿Õ¼ä£¬Îª»ú¹¹ÌåÄÚÈÝ+Êý¾ÝÄÚÈÝ+1¸ö¼ÇÂ¼³¤¶ÈµÄÊý¾Ý
//  234    pMsg = (mtOSALSerialData_t *)osal_msg_allocate( sizeof  
//  235           ( mtOSALSerialData_t )+8+1+4);
        ; Setup parameters for call to function osal_msg_allocate
        MOV     R2,#0x11
        MOV     R3,#0x0
        LCALL   ?Subroutine3 & 0xFFFF
//  236   //ÊÂ¼þºÅÓÃÔ­À´µÄCMD_SERIAL_MSG
//  237   pMsg->hdr.event = CMD_SERIAL_MSG;
//  238   pMsg->msg = (uint8*)(pMsg+1);  // °ÑÊý¾Ý¶¨Î»µ½½á¹¹ÌåÊý¾Ý²¿·Ö
//  239   pMsg->msg [0]= 12;              //¸øÉÏ²ãµÄÊý¾ÝµÚÒ»¸öÊÇ³¤¶È
??CrossCallReturnLabel_0:
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_4:
        MOV     A,#0xc
        MOVX    @DPTR,A
//  240   for(i=0;i<12;i++)                //´ÓµÚ¶þ¸ö¿ªÊ¼¼ÇÂ¼Êý¾Ý 
        MOV     R6,#0x0
//  241   pMsg->msg [i+1]= send[i];   
??MT_UartProcessZToolData_8:
        MOV     DPL,R6
        MOV     R0,DPL
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_12:
        PUSH    A
        CFI CFA_SP SP+-1
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_2:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0xc
        JC      ??MT_UartProcessZToolData_8
//  242   osal_msg_send( App_TaskID, (byte *)pMsg );  //µÇ¼ÇÈÎÎñ£¬·¢ÍùÉÏ²ã
??MT_UartProcessZToolData_9:
        ; Setup parameters for call to function osal_msg_send
        MOV     DPTR,#pMsg
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPTR,#App_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_send?relay
//  243   
//  244   osal_msg_deallocate ( (uint8 *)pMsg );      //ÊÍ·ÅÄÚ´æ
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     DPTR,#pMsg
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??osal_msg_deallocate?relay
//  245   }
//  246   
//  247   else if(flag==1&&r!=0)       //ÒÑ¾­´Ó´®¿Ú½ÓÊÕµ½ÐÅÏ¢
//  248 
//  249   {     /* Allocate memory for the data */
//  250 	    //·ÖÅäÄÚ´æ¿Õ¼ä£¬Îª»ú¹¹ÌåÄÚÈÝ+Êý¾ÝÄÚÈÝ+1¸ö¼ÇÂ¼³¤¶ÈµÄÊý¾Ý
//  251     uint8 ii=0,jj=4;
//  252     uint8 text[128];
//  253     unsigned long int textRSA[30];
//  254     for(i=0;i<j;i++)
//  255       textRSA[i]=RSAm((unsigned long int)buf[i],RSA_e,RSA_n);
//  256     for(i=0;i<j;i++)
//  257     {
//  258       for(jj=0;jj<4;jj++)
//  259       {
//  260         text[ii]=(uint8)textRSA[i];
//  261         textRSA[i]=textRSA[i]>>8;
//  262         ii++;
//  263       }
//  264     }
//  265     //for(i=0;i<j;i++)
//  266      // for(ii=0)
//  267      // text[i]=(uint8)*(&textRSA[0]+i);
//  268    pMsg = (mtOSALSerialData_t *)osal_msg_allocate( sizeof  
//  269           ( mtOSALSerialData_t )+j*4+1);
//  270   //ÊÂ¼þºÅÓÃÔ­À´µÄCMD_SERIAL_MSG
//  271   pMsg->hdr.event = CMD_SERIAL_MSG;
//  272   pMsg->msg = (uint8*)(pMsg+1);  // °ÑÊý¾Ý¶¨Î»µ½½á¹¹ÌåÊý¾Ý²¿·Ö
//  273   pMsg->msg [0]= j*4;              //¸øÉÏ²ãµÄÊý¾ÝµÚÒ»¸öÊÇ³¤¶È
//  274   for(i=0;i<j*4;i++)                //´ÓµÚ¶þ¸ö¿ªÊ¼¼ÇÂ¼Êý¾Ý 
//  275   pMsg->msg [i+1]= text[i];   
//  276   osal_msg_send( App_TaskID, (byte *)pMsg );  //µÇ¼ÇÈÎÎñ£¬·¢ÍùÉÏ²ã
//  277   /* deallocate the msg */
//  278   osal_msg_deallocate ( (uint8 *)pMsg );      //ÊÍ·ÅÄÚ´æ
//  279   }
//  280 }
??MT_UartProcessZToolData_10:
        MOV     DPL,#-0x6a
        MOV     DPH,#0x1
        LCALL   ?ADD_XSTACK_DISP0_16
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     R7,#0xd
        LJMP    ?BANKED_LEAVE_XDATA
        CFI CFA_XSP16 add(XSP16, 427)
??MT_UartProcessZToolData_4:
        MOV     A,#0x1
        XRL     A,?V0 + 3
        JNZ     ??MT_UartProcessZToolData_10
        MOV     ?V0 + 4,#0x0
        MOV     R6,#0x0
        SJMP    ??MT_UartProcessZToolData_11
??MT_UartProcessZToolData_12:
        MOV     DPL,R6
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,#0x0
        ; Setup parameters for call to function RSAm
        MOV     DPTR,#RSA_n
        LCALL   ?PUSH_XSTACK8_X_FOUR
        CFI CFA_XSP16 add(XSP16, 431)
        MOV     DPTR,#RSA_e
        LCALL   ?PUSH_XSTACK8_X_FOUR
        CFI CFA_XSP16 add(XSP16, 435)
        MOV     DPL,#0x1e
        MOV     DPH,#0x1
        LCALL   ?XSTACK_DISP0_16
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV     R2,A
        CLR     A
        MOV     R3,A
        MOV     R4,A
        MOV     R5,A
        LCALL   ??RSAm?relay
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 427)
        MOV     A,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,#0x1e
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,?V0 + 1
        MOV     DPH,A
        LCALL   ?XSTORE_R2345
        INC     R6
??MT_UartProcessZToolData_11:
        MOV     A,R6
        CLR     C
        SUBB    A,R7
        JC      ??MT_UartProcessZToolData_12
        MOV     R6,#0x0
        SJMP    ??MT_UartProcessZToolData_13
??MT_UartProcessZToolData_14:
        MOV     R1,#0x4
??MT_UartProcessZToolData_15:
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,#0x0
        MOV     A,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,#0x1e
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        ADD     A,?V0 + 0
        MOV     ?V0 + 6,A
        MOV     A,DPH
        ADDC    A,?V0 + 1
        MOV     ?V0 + 7,A
        MOV     DPL,?V0 + 6
        MOV     DPH,A
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     ?V0 + 8,?V0 + 4
        MOV     A,#-0x6a
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_15:
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     A,?V0 + 3
        XCH     A,R4
        XCH     A,R3
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_18:
        CLR     A
        MOVX    @DPTR,A
        INC     ?V0 + 4
        DEC     R1
        MOV     A,R1
        JNZ     ??MT_UartProcessZToolData_15
        INC     R6
??MT_UartProcessZToolData_13:
        MOV     A,R6
        CLR     C
        SUBB    A,R7
        JC      ??MT_UartProcessZToolData_14
        ; Setup parameters for call to function osal_msg_allocate
        MOV     ?V0 + 0,R7
        MOV     ?V0 + 1,#0x0
        MOV     A,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,?V0 + 0
        ADD     A,#0x5
        MOV     R2,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_1:
        MOV     A,R7
        RLC     A
        RLC     A
        ANL     A,#0xfc
        PUSH    A
        CFI CFA_SP SP+-1
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_5:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     R6,#0x0
??MT_UartProcessZToolData_16:
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 2,R7
        MOV     ?V0 + 3,#0x0
        MOV     A,#0x2
        MOV     R0,#?V0 + 2
        LCALL   ?S_SHL
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,?V0 + 2
        CLR     A
        SUBB    A,?V0 + 3
        CLR     C
        XRL     A,PSW
        RLC     A
        JC      $+5
        LJMP    ??MT_UartProcessZToolData_9 & 0xFFFF
        MOV     DPL,R6
        MOV     R0,DPL
        MOV     A,#-0x6a
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_13:
        PUSH    A
        CFI CFA_SP SP+-1
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_3:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        INC     R6
        SJMP    ??MT_UartProcessZToolData_16
        CFI EndBlock cfiBlock4

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond5 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 427)
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond6) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond6) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond6) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond6) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond6) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond6) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond6) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond6) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond6) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond6) CFA_SP SP+0
        CFI (cfiCond6) CFA_XSP16 add(XSP16, 427)
        CFI Block cfiPicker7 Using cfiCommon1
        CFI (cfiPicker7) NoFunction
        CFI (cfiPicker7) Picker
        MOV     A,DPL
        ADD     A,?V0 + 8
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiPicker7

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond8 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 427)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond9) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond9) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond9) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond9) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond9) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond9) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 427)
        CFI Block cfiPicker10 Using cfiCommon1
        CFI (cfiPicker10) NoFunction
        CFI (cfiPicker10) Picker
        MOV     A,DPL
        ADD     A,R0
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiPicker10

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond11 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 427)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond12) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond12) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond12) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond12) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond12) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 435)
        CFI Block cfiPicker13 Using cfiCommon1
        CFI (cfiPicker13) NoFunction
        CFI (cfiPicker13) Picker
        MOV     A,DPL
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiPicker13

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond14 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 427)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond15) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond15) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond15) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond15) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+-1
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 427)
        CFI Block cfiPicker16 Using cfiCommon1
        CFI (cfiPicker16) NoFunction
        CFI (cfiPicker16) Picker
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_22:
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine14_0 & 0xFFFF
??CrossCallReturnLabel_20:
        RET
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiPicker16

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond17 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 427)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond18) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond18) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond18) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond18) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond18) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+-1
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 427)
        CFI Block cfiPicker19 Using cfiCommon1
        CFI (cfiPicker19) NoFunction
        CFI (cfiPicker19) Picker
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_17:
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     DPL,R2
        MOV     DPH,A
        INC     DPTR
        RET
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiPicker19

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond20 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 427)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond21) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond21) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond21) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond21) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond21) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 427)
        CFI Block cfiPicker22 Using cfiCommon1
        CFI (cfiPicker22) NoFunction
        CFI (cfiPicker22) Picker
        LCALL   ??osal_msg_allocate?relay
        MOV     DPTR,#pMsg
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_21:
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     DPTR,#pMsg
        MOVX    A,@DPTR
        ADD     A,#0x4
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_16:
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiPicker22

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond23 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 427)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_3
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond24) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond24) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond24) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond24) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+-1
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 427)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_0
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond25) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond25) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond25) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond25) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond25) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 427)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_1
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond26) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond26) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond26) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 427)
        CFI Block cfiPicker27 Using cfiCommon1
        CFI (cfiPicker27) NoFunction
        CFI (cfiPicker27) Picker
        MOV     DPTR,#pMsg
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R2
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiPicker27

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond28 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 427)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_5
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond29) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond29) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond29) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond29) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+-1
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 427)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_0
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond30) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond30) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond30) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond30) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 427)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_1
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond31) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond31) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond31) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond31) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond31) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 427)
        CFI Block cfiPicker32 Using cfiCommon1
        CFI (cfiPicker32) NoFunction
        CFI (cfiPicker32) Picker
        MOV     DPTR,#pMsg
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiPicker32
        REQUIRE ??Subroutine14_0
        ; // Fall through to label ??Subroutine14_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine14_0:
        CFI Block cfiCond33 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 427)
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_5
        CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond34) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond34) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond34) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond34) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond34) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond34) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond34) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond34) CFA_SP SP+-1
        CFI (cfiCond34) CFA_XSP16 add(XSP16, 427)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_4
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond35) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond35) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond35) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond35) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond35) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 427)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_5
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond36) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond36) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond36) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond36) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond36) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+-1
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 427)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_0
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond37) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond37) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond37) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond37) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond37) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 427)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_1
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond38) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond38) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond38) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond38) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond38) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond38) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond38) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 427)
        CFI Block cfiPicker39 Using cfiCommon1
        CFI (cfiPicker39) NoFunction
        CFI (cfiPicker39) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiPicker39
//  281 
//  282 
//  283 /***************************************************************************************************
//  284  * @fn      MT_UartProcessZToolData
//  285  *
//  286  * @brief   | SOP | Data Length  |   CMD   |   Data   |  FCS  |
//  287  *          |  1  |     1        |    2    |  0-Len   |   1   |
//  288  *
//  289  *          Parses the data and determine either is SPI or just simply serial data
//  290  *          then send the data to correct place (MT or APP)
//  291  *
//  292  * @param   port     - UART port
//  293  *          event    - Event that causes the callback
//  294  *
//  295  *
//  296  * @return  None
//  297  ***************************************************************************************************/
//  298 
//  299 
//  300 #if defined (ZAPP_P1) || defined (ZAPP_P2)
//  301 /***************************************************************************************************
//  302  * @fn      MT_UartProcessZAppData
//  303  *
//  304  * @brief   | SOP | CMD  |   Data Length   | FSC  |
//  305  *          |  1  |  2   |       1         |  1   |
//  306  *
//  307  *          Parses the data and determine either is SPI or just simply serial data
//  308  *          then send the data to correct place (MT or APP)
//  309  *
//  310  * @param   port    - UART port
//  311  *          event   - Event that causes the callback
//  312  *
//  313  *
//  314  * @return  None
//  315  ***************************************************************************************************/
//  316 void MT_UartProcessZAppData ( uint8 port, uint8 event )
//  317 {
//  318 
//  319   osal_event_hdr_t  *msg_ptr;
//  320   uint16 length = 0;
//  321   uint16 rxBufLen  = Hal_UART_RxBufLen(MT_UART_DEFAULT_PORT);
//  322 
//  323   /*
//  324      If maxZAppBufferLength is 0 or larger than current length
//  325      the entire length of the current buffer is returned.
//  326   */
//  327   if ((MT_UartMaxZAppBufLen != 0) && (MT_UartMaxZAppBufLen <= rxBufLen))
//  328   {
//  329     length = MT_UartMaxZAppBufLen;
//  330   }
//  331   else
//  332   {
//  333     length = rxBufLen;
//  334   }
//  335 
//  336   /* Verify events */
//  337   if (event == HAL_UART_TX_FULL)
//  338   {
//  339     // Do something when TX if full
//  340     return;
//  341   }
//  342 
//  343   if (event & ( HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT))
//  344   {
//  345     if ( App_TaskID )
//  346     {
//  347       /*
//  348          If Application is ready to receive and there is something
//  349          in the Rx buffer then send it up
//  350       */
//  351       if ((MT_UartZAppRxStatus == MT_UART_ZAPP_RX_READY ) && (length != 0))
//  352       {
//  353         /* Disable App flow control until it processes the current data */
//  354          MT_UartAppFlowControl (MT_UART_ZAPP_RX_NOT_READY);
//  355 
//  356         /* 2 more bytes are added, 1 for CMD type, other for length */
//  357         msg_ptr = (osal_event_hdr_t *)osal_msg_allocate( length + sizeof(osal_event_hdr_t) );
//  358         if ( msg_ptr )
//  359         {
//  360           msg_ptr->event = SPI_INCOMING_ZAPP_DATA;
//  361           msg_ptr->status = length;
//  362 
//  363           /* Read the data of Rx buffer */
//  364           HalUARTRead( MT_UART_DEFAULT_PORT, (uint8 *)(msg_ptr + 1), length );
//  365 
//  366           /* Send the raw data to application...or where ever */
//  367           osal_msg_send( App_TaskID, (uint8 *)msg_ptr );
//  368         }
//  369       }
//  370     }
//  371   }
//  372 }
//  373 
//  374 /***************************************************************************************************
//  375  * @fn      SPIMgr_ZAppBufferLengthRegister
//  376  *
//  377  * @brief
//  378  *
//  379  * @param   maxLen - Max Length that the application wants at a time
//  380  *
//  381  * @return  None
//  382  *
//  383  ***************************************************************************************************/
//  384 void MT_UartZAppBufferLengthRegister ( uint16 maxLen )
//  385 {
//  386   /* If the maxLen is larger than the RX buff, something is not right */
//  387   if (maxLen <= MT_UART_DEFAULT_MAX_RX_BUFF)
//  388     MT_UartMaxZAppBufLen = maxLen;
//  389   else
//  390     MT_UartMaxZAppBufLen = 1; /* default is 1 byte */
//  391 }
//  392 
//  393 /***************************************************************************************************
//  394  * @fn      SPIMgr_AppFlowControl
//  395  *
//  396  * @brief
//  397  *
//  398  * @param   status - ready to send or not
//  399  *
//  400  * @return  None
//  401  *
//  402  ***************************************************************************************************/
//  403 void MT_UartAppFlowControl ( bool status )
//  404 {
//  405 
//  406   /* Make sure only update if needed */
//  407   if (status != MT_UartZAppRxStatus )
//  408   {
//  409     MT_UartZAppRxStatus = status;
//  410   }
//  411 
//  412   /* App is ready to read again, ProcessZAppData have to be triggered too */
//  413   if (status == MT_UART_ZAPP_RX_READY)
//  414   {
//  415     MT_UartProcessZAppData (MT_UART_DEFAULT_PORT, HAL_UART_RX_TIMEOUT );
//  416   }
//  417 
//  418 }
//  419 
//  420 #endif //ZAPP
//  421 
//  422 /***************************************************************************************************
//  423 ***************************************************************************************************/
//  424 
//  425 
//  426 unsigned long int RSA(unsigned long int a,unsigned long int b,unsigned long int c);
//  427 //²úÉúËæ»úËØÊý£¬uint8 p,q;

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  428 uint8 getpm(uint8 i)
getpm:
        CFI Block cfiBlock40 Using cfiCommon0
        CFI Function getpm
        CODE
//  429 {
        FUNCALL getpm, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL getpm, primem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  430   uint8 p1;
//  431   do{
//  432     p1=osal_rand()%255+1;
??getpm_0:
        ; Setup parameters for call to function osal_rand
        LCALL   ?Subroutine8 & 0xFFFF
//  433   }while(p1%2==0||!primem(p1));
??CrossCallReturnLabel_10:
        LCALL   ?US_DIV_MOD
        MOV     A,R2
        INC     A
        MOV     R6,A
        MOV     C,0xE0 /* A   */.0
        JNC     ??getpm_0
        ; Setup parameters for call to function primem
        MOV     R1,A
        LCALL   ??primem?relay
        MOV     A,R1
        JZ      ??getpm_0
        CFI EndBlock cfiBlock40
//  434   return p1;
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  435 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock41 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,R6
        MOV     R1,A
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock41

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  436 uint8 getqm(uint8 p1)
getqm:
        CFI Block cfiBlock42 Using cfiCommon0
        CFI Function getqm
        CODE
//  437 {
        FUNCALL getqm, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL getqm, primem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
//  438   uint8 q1;
//  439   do{
//  440     q1=osal_rand()%255+1;
??getqm_0:
        ; Setup parameters for call to function osal_rand
        LCALL   ?Subroutine8 & 0xFFFF
//  441   }while(q1%2==0||p1==q1||!primem(q1));
??CrossCallReturnLabel_11:
        LCALL   ?US_DIV_MOD
        MOV     A,R2
        INC     A
        MOV     R6,A
        MOV     C,0xE0 /* A   */.0
        JNC     ??getqm_0
        XRL     A,R7
        JZ      ??getqm_0
        ; Setup parameters for call to function primem
        MOV     A,R6
        MOV     R1,A
        LCALL   ??primem?relay
        MOV     A,R1
        JZ      ??getqm_0
//  442   return q1;
        SJMP    ?Subroutine1
        CFI EndBlock cfiBlock42
//  443 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond43 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker45 Using cfiCommon1
        CFI (cfiPicker45) NoFunction
        CFI (cfiPicker45) Picker
        LCALL   ??osal_rand?relay
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     R2,#-0x1
        MOV     R3,#0x0
        RET
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiPicker45
//  444 //ÅÐ¶ÏÊÇ·ñÎªËØÊý

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  445 uint8 primem(uint8 i)
primem:
        CFI Block cfiBlock46 Using cfiCommon0
        CFI Function primem
        CODE
//  446 {
        ; Saved register size: 0
        ; Auto size: 0
        MOV     A,R1
        MOV     R2,A
//  447   uint8 j;
//  448   if(i<1)
        JNZ     ??primem_0
//  449     return 0;
??primem_1:
        MOV     R1,#0x0
        SJMP    ??primem_2
//  450   for(j=3;j<i;j++){
??primem_0:
        MOV     R0,#0x3
        SJMP    ??primem_3
//  451     if(i%j==0)
??primem_4:
        MOV     A,R0
        MOV     B,A
        MOV     A,R1
        DIV     AB
        MOV     A,B
        JZ      ??primem_1
//  452       return 0;
//  453   }
        INC     R0
??primem_3:
        MOV     A,R0
        CLR     C
        SUBB    A,R2
        JC      ??primem_4
//  454   return 1;//È·¶¨ÊÇËØÊý
        MOV     R1,#0x1
??primem_2:
        LJMP    ?BRET
        CFI EndBlock cfiBlock46
//  455 }
//  456 //²úÉú¹«Ô¿E£¬unsigned long int e

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  457 unsigned long int getEm(unsigned long int Fn)
getEm:
        CFI Block cfiBlock47 Using cfiCommon0
        CFI Function getEm
        CODE
//  458 {
        FUNCALL getEm, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL getEm, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL getEm, gcdm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
//  459   unsigned long int e1=2;
        MOV     DPTR,#__Constant_2
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        SJMP    ??getEm_0
//  460   while(e1<Fn&&(!gcdm(Fn,e1)))
//  461   {
//  462     e1=(osal_rand()*osal_rand())%Fn+1;
??getEm_1:
        ; Setup parameters for call to function osal_rand
        LCALL   ??osal_rand?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        ; Setup parameters for call to function osal_rand
        LCALL   ??osal_rand?relay
        MOV     A,?V0 + 0
        MOV     B,R2
        MUL     AB
        XCH     A,?V0 + 0
        MOV     R0,B
        MOV     B,R3
        MUL     AB
        ADD     A,R0
        MOV     R0,A
        MOV     B,R2
        MOV     A,?V0 + 1
        MUL     AB
        ADD     A,R0
        MOV     ?V0 + 1,A
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     ?V0 + 8,?V0 + 4
        MOV     ?V0 + 9,?V0 + 5
        MOV     ?V0 + 10,?V0 + 6
        MOV     ?V0 + 11,?V0 + 7
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?UL_DIV_MOD
        MOV     DPTR,#__Constant_1
        MOV     R0,#?V0 + 8
        LCALL   ?L_ADD_X
//  463   }
??getEm_0:
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?UL_GT
        JNC     ??getEm_2
        ; Setup parameters for call to function gcdm
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        LCALL   ??gcdm?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R2
        ORL     A,R3
        ORL     A,R4
        ORL     A,R5
        JZ      ??getEm_1
//  464   return e1;
??getEm_2:
        MOV     R2,?V0 + 8
        MOV     R3,?V0 + 9
        MOV     R4,?V0 + 10
        MOV     R5,?V0 + 11
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock47
//  465 }
//  466 //²úÉúË½Ô¿D unsigned long int d

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  467 unsigned long int getDm(unsigned long int Fn,unsigned long int e1)
getDm:
        CFI Block cfiBlock48 Using cfiCommon0
        CFI Function getDm
        CODE
//  468 {
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_6:
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
//  469   unsigned long int d1=2;
        MOV     DPTR,#__Constant_2
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        SJMP    ??getDm_0
//  470     while(((e1*d1)%Fn)!=1)
//  471     {
//  472       d1++;
??getDm_1:
        MOV     DPTR,#__Constant_1
        MOV     R0,#?V0 + 8
        LCALL   ?L_ADD_X
//  473     }
??getDm_0:
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
        MOV     ?V0 + 2,?V0 + 6
        MOV     ?V0 + 3,?V0 + 7
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?L_MUL
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 12
        LCALL   ?UL_DIV_MOD
        MOV     DPTR,#__Constant_1
        MOV     R0,#?V0 + 12
        LCALL   ?L_EQ_X
        JNZ     ??getDm_1
//  474   return d1;
        MOV     R2,?V0 + 8
        MOV     R3,?V0 + 9
        MOV     R4,?V0 + 10
        MOV     R5,?V0 + 11
        CFI EndBlock cfiBlock48
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  475 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock49 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock49
        REQUIRE ??Subroutine15_0
        ; // Fall through to label ??Subroutine15_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine15_0:
        CFI Block cfiBlock50 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock50
//  476 //ÅÐ¶ÏÊÇ·ñ»¥ËØ

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  477 unsigned long int gcdm(unsigned long int a,unsigned long int b)
gcdm:
        CFI Block cfiBlock51 Using cfiCommon0
        CFI Function gcdm
        CODE
//  478 {
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 0
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 9,R3
        MOV     ?V0 + 10,R4
        MOV     ?V0 + 11,R5
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        SJMP    ??gcdm_0
//  479   if(a%b==0)
//  480     return 0;
//  481   else if(a%b==1)
//  482     return 1;
//  483   else 
//  484     return gcdm(b,a%b);
??gcdm_1:
        MOV     ?V0 + 0,?V0 + 12
        MOV     ?V0 + 1,?V0 + 13
        MOV     ?V0 + 2,?V0 + 14
        MOV     ?V0 + 3,?V0 + 15
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 12
        LCALL   ?UL_DIV_MOD
        MOV     ?V0 + 8,?V0 + 0
        MOV     ?V0 + 9,?V0 + 1
        MOV     ?V0 + 10,?V0 + 2
        MOV     ?V0 + 11,?V0 + 3
??gcdm_0:
        MOV     ?V0 + 4,?V0 + 8
        MOV     ?V0 + 5,?V0 + 9
        MOV     ?V0 + 6,?V0 + 10
        MOV     ?V0 + 7,?V0 + 11
        MOV     ?V0 + 0,?V0 + 12
        MOV     ?V0 + 1,?V0 + 13
        MOV     ?V0 + 2,?V0 + 14
        MOV     ?V0 + 3,?V0 + 15
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?UL_DIV_MOD
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        ORL     A,?V0 + 2
        ORL     A,?V0 + 3
        JNZ     ??gcdm_2
        MOV     R2,#0x0
        SJMP    ??gcdm_3
??gcdm_2:
        MOV     ?V0 + 4,?V0 + 8
        MOV     ?V0 + 5,?V0 + 9
        MOV     ?V0 + 6,?V0 + 10
        MOV     ?V0 + 7,?V0 + 11
        MOV     ?V0 + 0,?V0 + 12
        MOV     ?V0 + 1,?V0 + 13
        MOV     ?V0 + 2,?V0 + 14
        MOV     ?V0 + 3,?V0 + 15
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?UL_DIV_MOD
        MOV     DPTR,#__Constant_1
        MOV     R0,#?V0 + 0
        LCALL   ?L_EQ_X
        JNZ     ??gcdm_1
        MOV     R2,#0x1
??gcdm_3:
        MOV     R3,#0x0
        MOV     R4,#0x0
        MOV     R5,#0x0
        LJMP    ??Subroutine15_0 & 0xFFFF
        CFI EndBlock cfiBlock51
//  485 }
//  486 //ºËÐÄ¼ÓÃÜ½âÃÜËã·¨

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  487 unsigned long int RSAm(unsigned long int a,unsigned long int b,unsigned long int c)
RSAm:
        CFI Block cfiBlock52 Using cfiCommon0
        CFI Function RSAm
        CODE
//  488 {
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_7:
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     A,#0x20
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
//  489   unsigned long int r=1;
        MOV     DPTR,#__Constant_1
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
//  490   b=b+1;
        MOV     DPTR,#__Constant_1
        SJMP    ??RSAm_0
//  491   while(b!=1)
//  492   {
//  493     
//  494     r=r*a;
//  495     r=r%c;
??RSAm_1:
        MOV     ?V0 + 0,?V0 + 12
        MOV     ?V0 + 1,?V0 + 13
        MOV     ?V0 + 2,?V0 + 14
        MOV     ?V0 + 3,?V0 + 15
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 12
        LCALL   ?L_MUL
        MOV     ?V0 + 12,?V0 + 8
        MOV     ?V0 + 13,?V0 + 9
        MOV     ?V0 + 14,?V0 + 10
        MOV     ?V0 + 15,?V0 + 11
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 12
        LCALL   ?UL_DIV_MOD
//  496     b--;
        MOV     DPTR,#__Constant_ffffffff
??RSAm_0:
        MOV     R0,#?V0 + 4
        LCALL   ?L_ADD_X
//  497    // HalUARTWrite(0,"T",1 );
//  498    // if(b==1)
//  499    // HalUARTWrite(0,(unsigned char *)&r,4 );
//  500   }
        MOV     DPTR,#__Constant_1
        MOV     R0,#?V0 + 4
        LCALL   ?L_EQ_X
        JNZ     ??RSAm_1
//  501    //HalUARTWrite(0,(unsigned char *)&r,5 );
//  502   return r;
        MOV     R2,?V0 + 12
        MOV     R3,?V0 + 13
        MOV     R4,?V0 + 14
        MOV     R5,?V0 + 15
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock52
//  503 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond53 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond54) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond54) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond54) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond54) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond54) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond54) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond54) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond54) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond54) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond54) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker55 Using cfiCommon1
        CFI (cfiPicker55) NoFunction
        CFI (cfiPicker55) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_19:
        MOV     A,R5
        MOVX    @DPTR,A
        MOV     A,#0x1c
        RET
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiPicker55

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond56 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 427)
        CFI Block cfiCond57 Using cfiCommon0
        CFI (cfiCond57) NoFunction
        CFI (cfiCond57) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_6
        CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond57) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond57) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond57) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond57) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond57) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond57) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond57) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond57) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond57) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond57) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond57) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond57) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond57) CFA_SP SP+0
        CFI (cfiCond57) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_7
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond58) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond58) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond58) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond58) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond58) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond58) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond58) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond58) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker59 Using cfiCommon1
        CFI (cfiPicker59) NoFunction
        CFI (cfiPicker59) Picker
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        RET
        CFI EndBlock cfiCond56
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiPicker59

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_UartInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_UartInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_UartRegisterTaskID?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_UartRegisterTaskID

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_UartCalcFCS?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_UartCalcFCS

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_UartProcessZToolData?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_UartProcessZToolData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??getpm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    getpm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??getqm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    getqm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??primem?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    primem

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??getEm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    getEm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??getDm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    getDm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??gcdm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    gcdm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??RSAm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    RSAm

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\267\\242\\313\\315keye\\n">`:
        DB "\267\242\313\315keye\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_2:
        DD 2

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_1:
        DD 1

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_ffffffff:
        DD 4294967295

        END
// 
// 1 698 bytes in segment BANKED_CODE
//    66 bytes in segment BANK_RELAYS
//    22 bytes in segment XDATA_ROM_C
//     9 bytes in segment XDATA_Z
// 
// 1 764 bytes of CODE  memory
//    10 bytes of CONST memory (+ 12 bytes shared)
//     9 bytes of XDATA memory
//
//Errors: none
//Warnings: 2
